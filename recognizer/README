This is a word-isolated, speaker-dependent speech recognizor tool. This tools could recognize number word zero to ten and operator word: "plus", "minus","multiply","divide" said by a specific speaker.

How to recognize:
1.record the single word and save the file as .wav format.
2.put the .wav file into the folder Recognizer/data/test/wav folder
3.change the file's name in /test/targetList file as the .wav you just put. The path's number should equal to the number of your test wav file. also change the mfcc file's name as same as the wav file's name on the left side. 
4.change the mfcc file's name as same as the path name in targetList.
5.run shellControl script under recognizer folder.

File instruction:
1.data folder store all the wav file, mfcc file and .lab file for training and test data. 
2.mfcc file are a encoded file for wav file, it is used for the training and test process, we cannot use the .wav file directly to train the model.
3.mfcc file are generated using HCopy, which also need a targetlist file in the training folder. Targetlist file contains the path for all the .wav files and its corresponding mfcc file's path, the two path are in the same line. 
4.the /model/proto folder contains the prototype for each HMM(each word is one HMM)
5.prototype file contains means and variance and transition matrix for HMM, we have 6 state including 4 live state and 2 static state, so we have 4 means and variances.
6.we use HInit to initialize the HMMs, we use the prototype to train the initialized version HMM and saved it in hmm0 file.
7.HInit also need a trainlist txt file to store the path of all the mfcc that going to be trained.
8.Hinit also need a label directory shows all the pre-made label's directory and for each HMM, also need to point which label it is going to use(one, two...)
9.use command: "HInit -A -D â€“T 1 -S trainlist.txt -M model/hmm0 -H model/proto/hmmfile -l label -L label_dir nameofhmm"
10.use Hcompv to generate a vFloors file
11.use HRest to iteratively train the HMMs, at least iterative 5 times for each HMM
12.use command"HRest -A -D -T 1 -S trainlist.txt -M model/hmmi -H vFloors -H model/hmmi-1/hmmfile -l label -L label_dir nameofhmm" several times
13.def folder stores the definition of our grammer and dictionary file and network file
14.use HParse to generate network file (command"HParse -A -D -T 1   gram.txt   net.slf")
15.if the HMMs is so many, we can use a .mmf file to store all the hmm together when we recognize them.
16.the mmf file is under /model/hmm16/hmm16.mmf(hmmdef.mmf)
17.use HVite to recognize the test file, need a hmmlist to store all the HMM names.
18.use HResults to evaluate the performance, need a ref.mlf, and generate a recog.mlf
19.ref.mlf: a macro file that contains all the labels of the test wav files. used by HResults.
20.recog.mlf: a macro file that contains all the recoginized label of the test wav files, generated by HVite.


